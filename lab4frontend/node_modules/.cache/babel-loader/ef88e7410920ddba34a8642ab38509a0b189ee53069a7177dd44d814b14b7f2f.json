{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"canvas-container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"canvas\", {\n    id: \"myCanvas\",\n    ref: \"canvas\",\n    height: \"350px\",\n    width: \"350px\",\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.handleClick && $options.handleClick(...args))\n  }, null, 512 /* NEED_PATCH */)]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","id","ref","height","width","onClick","_cache","args","$options","handleClick"],"sources":["C:\\study\\labs\\web\\labwork4\\lab4frontend\\src\\components\\main_page_components\\Canvas.vue"],"sourcesContent":["<template>\r\n  <div class=\"canvas-container\">\r\n    <canvas id=\"myCanvas\" ref=\"canvas\" height=\"350px\" width=\"350px\" @click=\"handleClick\"></canvas>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'CanvasComponent',\r\n  props: {\r\n    valueR: {\r\n      type: Number,\r\n      required: true,\r\n    },\r\n    points: {\r\n      type: Array,\r\n      required: true,\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      ctx: null,\r\n      canvas: null,\r\n    };\r\n  },\r\n  mounted() {\r\n    canvas = this.$refs.canvas;\r\n    this.ctx = this.canvas.getContext('2d');\r\n    this.draw();\r\n  },\r\n  watch: {\r\n    valueR: {\r\n      immediate: true,\r\n      handler() {\r\n        if (this.ctx) {\r\n          this.draw();\r\n        }\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    draw() {\r\n      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n      this.ctx.scale(1, 1);\r\n      this.ctx.beginPath();\r\n      this.ctx.fillStyle = \"blue\";\r\n      this.ctx.moveTo(this.canvas.width / 2, this.canvas.height / 2);\r\n      this.ctx.arc(\r\n          this.canvas.width / 2,\r\n          this.canvas.height / 2,\r\n          30 * this.valueR,\r\n          Math.PI,\r\n          1.5 * Math.PI\r\n      );\r\n      this.ctx.fill();\r\n      this.ctx.closePath();\r\n\r\n      this.ctx.fillRect(this.canvas.width / 2,\r\n          this.canvas.height / 2,\r\n          30 * this.valueR,\r\n          30 * this.valueR);\r\n\r\n      this.ctx.moveTo(this.canvas.width / 2, this.canvas.height / 2);\r\n      this.ctx.lineTo(this.canvas.width / 2, this.canvas.height / 2 - 15 * this.valueR);\r\n      this.ctx.lineTo(this.canvas.width / 2 + 15 * this.valueR, this.canvas.height / 2);\r\n      this.ctx.fill();\r\n\r\n      this.ctx.fillStyle = \"black\";\r\n      this.ctx.beginPath();\r\n      this.ctx.moveTo(0, this.canvas.height / 2);\r\n      this.ctx.lineTo(this.canvas.width, this.canvas.height / 2);\r\n      this.ctx.closePath();\r\n      this.ctx.stroke();\r\n\r\n      this.ctx.beginPath();\r\n      this.ctx.moveTo(this.canvas.width, this.canvas.height / 2);\r\n      this.ctx.lineTo(this.canvas.width - 10, this.canvas.height / 2 - 5);\r\n      this.ctx.lineTo(this.canvas.width - 10, this.canvas.height / 2 + 5);\r\n      this.ctx.fillText('x', this.canvas.width - 15, this.canvas.height / 2 + 15);\r\n      this.ctx.closePath();\r\n      this.ctx.fill();\r\n\r\n      this.ctx.beginPath();\r\n      this.ctx.moveTo(this.canvas.width / 2 - 15 * value_R, this.canvas.height / 2 + 5);\r\n      this.ctx.lineTo(this.canvas.width / 2 - 15 * value_R, this.canvas.height / 2 - 5);\r\n      this.ctx.closePath();\r\n      this.ctx.stroke();\r\n      this.ctx.beginPath();\r\n      this.ctx.moveTo(this.canvas.width / 2 - 30 * value_R, this.canvas.height / 2 + 5);\r\n      this.ctx.lineTo(this.canvas.width / 2 - 30 * value_R, this.canvas.height / 2 - 5);\r\n      this.ctx.closePath();\r\n      this.ctx.stroke();\r\n      this.ctx.beginPath();\r\n      this.ctx.moveTo(this.canvas.width / 2 + 15 * value_R, this.canvas.height / 2 + 5);\r\n      this.ctx.lineTo(this.canvas.width / 2 + 15 * value_R, this.canvas.height / 2 - 5);\r\n      this.ctx.closePath();\r\n      this.ctx.stroke();\r\n      this.ctx.beginPath();\r\n      this.ctx.moveTo(this.canvas.width / 2 + 30 * value_R, this.canvas.height / 2 + 5);\r\n      this.ctx.lineTo(this.canvas.width / 2 + 30 * value_R, this.canvas.height / 2 - 5);\r\n      this.ctx.closePath();\r\n      this.ctx.stroke();\r\n\r\n      this.ctx.beginPath();\r\n      this.ctx.moveTo(this.canvas.width / 2, 0);\r\n      this.ctx.lineTo(this.canvas.width / 2, this.canvas.height);\r\n      this.ctx.closePath();\r\n      this.ctx.stroke();\r\n\r\n      this.ctx.beginPath();\r\n      this.ctx.moveTo(this.canvas.width / 2, 0);\r\n      this.ctx.lineTo(this.canvas.width / 2 - 5, 10);\r\n      this.ctx.lineTo(this.canvas.width / 2 + 5, 10);\r\n      this.ctx.fillText('y', this.canvas.width / 2 + 15, 10);\r\n      this.ctx.closePath();\r\n      this.ctx.fill();\r\n\r\n      this.ctx.beginPath();\r\n      this.ctx.moveTo(this.canvas.width / 2 + 5, this.canvas.height / 2 - 30 * value_R);\r\n      this.ctx.lineTo(this.canvas.width / 2 - 5, this.canvas.height / 2 - 30 * value_R);\r\n      this.ctx.closePath();\r\n      this.ctx.stroke();\r\n      this.ctx.beginPath();\r\n      this.ctx.moveTo(this.canvas.width / 2 + 5, this.canvas.height / 2 - 15 * value_R);\r\n      this.ctx.lineTo(this.canvas.width / 2 - 5, this.canvas.height / 2 - 15 * value_R);\r\n      this.ctx.closePath();\r\n      this.ctx.stroke();\r\n      this.ctx.beginPath();\r\n      this.ctx.moveTo(this.canvas.width / 2 + 5, this.canvas.height / 2 + 15 * value_R);\r\n      this.ctx.lineTo(this.canvas.width / 2 - 5, this.canvas.height / 2 + 15 * value_R);\r\n      this.ctx.closePath();\r\n      this.ctx.stroke();\r\n      this.ctx.beginPath();\r\n      this.ctx.moveTo(this.canvas.width / 2 + 5, this.canvas.height / 2 + 30 * value_R);\r\n      this.ctx.lineTo(this.canvas.width / 2 - 5, this.canvas.height / 2 + 30 * value_R);\r\n      this.ctx.closePath();\r\n      this.ctx.stroke();\r\n      if (value_R > 1) {\r\n        this.ctx.fillText(\"-R/2\", this.canvas.width / 2 - 15 * value_R, this.canvas.height / 2 + 10);\r\n        this.ctx.fillText(\"-R\", this.canvas.width / 2 - 30 * value_R, this.canvas.height / 2 + 10);\r\n        this.ctx.fillText(\"R/2\", this.canvas.width / 2 + 15 * value_R, this.canvas.height / 2 + 10);\r\n        this.ctx.fillText(\"R\", this.canvas.width / 2 + 30 * value_R, this.canvas.height / 2 + 10);\r\n        this.ctx.fillText(\"-R\", this.canvas.width / 2 - 25, this.canvas.height / 2 + 30 * value_R);\r\n        this.ctx.fillText(\"-R/2\", this.canvas.width / 2 - 25, this.canvas.height / 2 + 15 * value_R);\r\n        this.ctx.fillText(\"R\", this.canvas.width / 2 - 25, this.canvas.height / 2 - 30 * value_R);\r\n        this.ctx.fillText(\"R/2\", this.canvas.width / 2 - 25, this.canvas.height / 2 - 15 * value_R);\r\n      }\r\n    },\r\n    handleClick(event) {\r\n      let area = this.canvas.getBoundingClientRect();\r\n\r\n      let rawX = event.clientX - area.left - this.canvas.width / 2;\r\n      let rawY = this.canvas.height / 2 - (event.clientY - area.top);\r\n\r\n      let valueX = (rawX / (this.canvas.width / 2) * this.valueR * 1.75);\r\n      let valueY = (rawY / (this.canvas.height / 2) * this.valueR * 1.75);\r\n\r\n      const dotX = this.canvas.width / 2 + rawX;\r\n      const dotY = this.canvas.height / 2 - rawY;\r\n\r\n      if (this.checkPoint(valueX, valueY, this.valueR)) {\r\n        this.ctx.fillStyle = \"green\";\r\n      } else {\r\n        this.ctx.fillStyle = \"red\";\r\n      }\r\n      this.ctx.beginPath();\r\n      this.ctx.arc(dotX, dotY, 3, 0, 2 * Math.PI);\r\n      this.ctx.fill();\r\n      this.ctx.closePath();\r\n    },\r\n    checkPoint(x, y, r) {\r\n      if (x >= 0 && y >= 0) {\r\n        return this.checkRectangle(x, y, r);\r\n      } else if (x <= 0 && y >= 0) {\r\n        return this.checkTriangle(x, y, r);\r\n      } else if (x <= 0 && y <= 0) {\r\n        return this.checkCircle(x, y, r);\r\n      } else {\r\n        return false;\r\n      }\r\n    },\r\n    checkTriangle(x, y, r) {\r\n      return y <= (x / 2) - r && y <= r && x <= (r / 2);\r\n    },\r\n    checkCircle(x, y, r) {\r\n      return x ** 2 + y ** 2 <= (r / 2) ** 2;\r\n    },\r\n    checkRectangle(x, y, r) {\r\n      return x <= r && y >= -r;\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.canvas-container {\r\n  width: 355px;\r\n  height: 355px;\r\n  border: 2px solid #178473;\r\n  border-radius: 20px;\r\n  background-color: white;\r\n  grid-column-start: 3;\r\n  grid-column-end: 4;\r\n}\r\n\r\n</style>\r\n"],"mappings":";;EACOA,KAAK,EAAC;AAAkB;;uBAA7BC,mBAAA,CAEM,OAFNC,UAEM,GADJC,mBAAA,CAA8F;IAAtFC,EAAE,EAAC,UAAU;IAACC,GAAG,EAAC,QAAQ;IAACC,MAAM,EAAC,OAAO;IAACC,KAAK,EAAC,OAAO;IAAEC,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,WAAA,IAAAD,QAAA,CAAAC,WAAA,IAAAF,IAAA,CAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}