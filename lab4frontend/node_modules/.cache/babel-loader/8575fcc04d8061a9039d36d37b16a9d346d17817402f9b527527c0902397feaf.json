{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport { defineStore } from 'pinia';\nimport { ref } from 'vue';\nimport axios from 'axios';\nexport const useAuthStore = defineStore('auth', () => {\n  const user = ref(null);\n  const error = ref(null);\n  let tokenStorage = localStorage.getItem(\"token\") || [];\n  const fetchUser = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:8000/api/user/\");\n      user.value = response.data;\n      error.value = null;\n    } catch (err) {\n      user.value = null;\n      error.value = err.response?.data?.message || \"Ошибка получения пользователя\";\n    }\n  };\n  const login = async credentials => {\n    try {\n      const response = await axios.post(\"http://localhost:8000/auth/login\", new URLSearchParams({\n        username: credentials.username,\n        password: credentials.password\n      }), {\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        }\n      });\n      if (response.status === 200) {\n        tokenStorage.push(response.data);\n        localStorage.setItem(\"token\", JSON.stringify(tokenStorage));\n        await fetchUser();\n        return {\n          success: true\n        };\n      } else {\n        throw new Error(\"Неверный логин или пароль\");\n      }\n    } catch (err) {\n      console.log(err);\n      error.value = err.response?.data?.message || \"Ошибка входа.\";\n      return {\n        success: false,\n        message: error.value\n      };\n    }\n  };\n  const logout = async () => {\n    try {\n      localStorage.removeItem(\"token\");\n      user.value = null;\n      error.value = null;\n      return {\n        success: true\n      };\n    } catch (err) {\n      error.value = err.response?.data?.message || \"Ошибка выхода.\";\n    }\n  };\n  const register = async userData => {\n    try {\n      const response = await axios.post(\"http://localhost:8000/auth/register\", new URLSearchParams({\n        username: userData.username,\n        password: userData.password\n      }), {\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        }\n      });\n      if (response.status === 200) {\n        await login({\n          username: userData.username,\n          password: userData.password\n        });\n        return {\n          success: true,\n          message: \"Регистрация прошла успешно\"\n        };\n      } else {\n        throw new Error(\"Ошибка регистрации\");\n      }\n    } catch (err) {\n      console.log(err);\n      if (err.response) {\n        if (err.response.status === 409) {\n          return {\n            success: false,\n            message: \"Пользователь с таким именем уже существует.\"\n          };\n        }\n        error.value = err.response.data?.message || \"Ошибка регистрации.\";\n      } else {\n        console.log(err.response);\n        error.value = \"Ошибка сети.\";\n      }\n      return {\n        success: false,\n        message: error.value\n      };\n    }\n  };\n  return {\n    user,\n    error,\n    login,\n    logout,\n    fetchUser,\n    register\n  };\n});","map":{"version":3,"names":["defineStore","ref","axios","useAuthStore","user","error","tokenStorage","localStorage","getItem","fetchUser","response","get","value","data","err","message","login","credentials","post","URLSearchParams","username","password","headers","status","push","setItem","JSON","stringify","success","Error","console","log","logout","removeItem","register","userData"],"sources":["C:/study/labs/web/labwork4/lab4frontend/src/auth.js"],"sourcesContent":["import {defineStore} from 'pinia';\r\nimport {ref} from 'vue';\r\nimport axios from 'axios';\r\n\r\nexport const useAuthStore = defineStore('auth', () => {\r\n    const user = ref(null);\r\n    const error = ref(null);\r\n    let tokenStorage = localStorage.getItem(\"token\") || [];\r\n\r\n    const fetchUser = async () => {\r\n        try {\r\n            const response = await axios.get(\"http://localhost:8000/api/user/\");\r\n            user.value = response.data;\r\n            error.value = null;\r\n        } catch (err) {\r\n            user.value = null;\r\n            error.value = err.response?.data?.message || \"Ошибка получения пользователя\";\r\n        }\r\n    }\r\n\r\n    const login = async (credentials) => {\r\n        try {\r\n            const response = await axios.post(\"http://localhost:8000/auth/login\",\r\n                new URLSearchParams({\r\n                    username: credentials.username,\r\n                    password: credentials.password,\r\n                }),\r\n                { headers: { 'Content-Type': 'application/x-www-form-urlencoded' } });\r\n\r\n            if (response.status === 200) {\r\n                tokenStorage.push(response.data);\r\n                localStorage.setItem(\"token\", JSON.stringify(tokenStorage));\r\n                await fetchUser();\r\n                return { success: true };\r\n            } else {\r\n                throw new Error(\"Неверный логин или пароль\");\r\n            }\r\n        } catch (err) {\r\n            console.log(err);\r\n            error.value = err.response?.data?.message || \"Ошибка входа.\";\r\n            return { success: false, message: error.value };\r\n        }\r\n    }\r\n\r\n    const logout = async () => {\r\n        try {\r\n            localStorage.removeItem(\"token\");\r\n            user.value = null;\r\n            error.value = null;\r\n            return {success: true };\r\n        } catch (err) {\r\n            error.value = err.response?.data?.message || \"Ошибка выхода.\";\r\n        }\r\n    }\r\n\r\n    const register = async (userData) => {\r\n        try {\r\n            const response = await axios.post(\"http://localhost:8000/auth/register\",\r\n                new URLSearchParams({\r\n                    username: userData.username,\r\n                    password: userData.password,\r\n                }),\r\n                { headers: { 'Content-Type': 'application/x-www-form-urlencoded' } }\r\n            );\r\n\r\n            if (response.status === 200) {\r\n                await login({ username: userData.username, password: userData.password });\r\n                return { success: true, message: \"Регистрация прошла успешно\" };\r\n            } else {\r\n                throw new Error(\"Ошибка регистрации\");\r\n            }\r\n        } catch (err) {\r\n            console.log(err);\r\n            if (err.response) {\r\n                if (err.response.status === 409) {\r\n                    return { success: false, message: \"Пользователь с таким именем уже существует.\" };\r\n                }\r\n                error.value = err.response.data?.message || \"Ошибка регистрации.\";\r\n            } else {\r\n                console.log(err.response);\r\n                error.value = \"Ошибка сети.\";\r\n            }\r\n            return { success: false, message: error.value };\r\n        }\r\n    }\r\n\r\n\r\n    return {user, error, login, logout, fetchUser, register};\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}